- name: Create Grafana config from template
  template:
    src: grafana-config-map.ini.j2
    dest: /tmp/grafana.ini

- name: Create Grafana datasource config from template
  template:
    src: grafana-data-sources.yml.j2
    dest: /tmp/datasources.yml

- name: Create config-map from Grafana ini config
  shell: oc create configmap '{{ grafana_ini_configmap_name }}' --from-file=grafana.ini=/tmp/grafana.ini -n '{{ namespace }}'

- name: Create config-map from datasources config
  shell: oc create configmap '{{ grafana_datasources_configmap_name }}' --from-file=datasources.yml=/tmp/datasources.yml -n '{{ namespace }}'

- name: Create config-map from dashboards provider config
  shell: oc create configmap '{{ grafana_dashboards_providers_configmap_name }}' --from-file=provider.yml={{ role_path }}/files/grafana-dashboards-provider.yml -n '{{ namespace }}'

- name: Create config-map from dashboards config
  shell: >
    oc create configmap '{{ grafana_dashboards_configmap_name }}' \
      --from-file=grafana-primary-dashboard.json={{ role_path }}/files/grafana-primary-dashboard.json \
      --from-file=mobile-services-dashboard.json={{ role_path }}/files/mobile-services-dashboard.json \
      --from-file=mobile-app-metrics-dashboard.json={{ role_path }}/files/mobile-app-metrics-dashboard.json \
      --from-file=mobile-app-security-dashboard.json={{ role_path }}/files/mobile-app-security-dashboard.json \
      -n '{{ namespace }}'

- name: Grafana PVC
  k8s_v1_persistent_volume_claim:
    name: '{{ grafana_claim_name }}'
    namespace: "{{ namespace }}"
    labels:
      app: metrics
      service: prometheus
    access_modes:
      - ReadWriteOnce
    resources_requests:
      storage: "{{ GRAFANA_STORAGE_SIZE }}Gi"
    state: present

- name: create grafana deployment config
  openshift_v1_deployment_config:
    name: grafana
    namespace: '{{ namespace }}'
    labels:
      app: metrics
      service: prometheus
    replicas: 1
    selector:
      app: grafana
      service: prometheus
    spec_template_metadata_labels:
      app: grafana
      service: prometheus
    spec_template_spec_service_account_name: '{{ proxy_serviceaccount_name }}'
    containers:
    - name: grafana-oauth-proxy
      image: '{{ proxy_image }}:{{ proxy_version }}'
      imagePullPolicy: IfNotPresent
      ports:
      - containerPort: '{{ grafana_proxy_port }}'
        name: public
      args:
      - --provider=openshift
      - --openshift-service-account={{ proxy_serviceaccount_name }}
      - --upstream=http://localhost:{{ grafana_port }}
      - >-
        --openshift-sar={"namespace":"{{ namespace }}","resource":"deploymentconfigs","name":"prometheus","verb":"update"}
      - --http-address=0.0.0.0:{{ grafana_proxy_port }}
      - --https-address=
      - --cookie-secret=SECRET
    - name: grafana
      image: '{{ grafana_image }}:{{ grafana_version }}'
      args:
        - -config=/etc/grafana/grafana.ini
      ports:
      - container_port: '{{ grafana_port }}'
        protocol: TCP
      volume_mounts:
        - mount_path: /etc/grafana
          name: '{{ grafana_ini_configmap_volume_name }}'
        - mount_path: /etc/grafana/conf/provisioning/datasources
          name: '{{ grafana_datasources_configmap_volume_name }}'
        - mount_path: /etc/grafana/conf/provisioning/dashboards
          name: '{{ grafana_dashboards_providers_configmap_volume_name }}'
        - mount_path: /etc/grafana-dashboards
          name: '{{ grafana_dashboards_configmap_volume_name }}'
        - mount_path: /var/lib/grafana
          name: grafana-data
        - mount_path: /var/log/grafana
          name: grafana-log
    volumes:
      - name: '{{ grafana_ini_configmap_volume_name }}'
        config_map:
          defaultMode: 420
          name: '{{ grafana_ini_configmap_name }}'
      - name: '{{ grafana_datasources_configmap_volume_name }}'
        config_map:
          defaultMode: 420
          name: '{{ grafana_datasources_configmap_name }}'
      - name: '{{ grafana_dashboards_configmap_volume_name }}'
        config_map:
          defaultMode: 420
          name: '{{ grafana_dashboards_configmap_name }}'
      - name: '{{ grafana_dashboards_providers_configmap_volume_name }}'
        config_map:
          defaultMode: 420
          name: '{{ grafana_dashboards_providers_configmap_name }}'
      - name: grafana-data
        persistent_volume_claim:
          claim_name: '{{ grafana_claim_name }}'
      - name: grafana-log
        empty_dir:

- name: create grafana service
  k8s_v1_service:
    name: '{{ grafana_service_name }}'
    namespace: '{{ namespace }}'
    labels:
      app: metrics
      service: prometheus
    selector:
      app: grafana
      service: prometheus
    ports:
      - name: web
        port: 443
        target_port: '{{ grafana_proxy_port }}'

- name: create internal grafana service
  k8s_v1_service:
    name: '{{ grafana_internal_service_name }}'
    namespace: '{{ namespace }}'
    labels:
      app: metrics
      service: prometheus
    selector:
      app: grafana
      service: prometheus
    ports:
      - name: web
        port: 80
        target_port: '{{ grafana_port }}'
  register: grafana_internal_service

- name: create grafana route
  openshift_v1_route:
    annotations:
      console.alpha.openshift.io/overview-app-route: 'true'
    name: '{{ grafana_route_name }}'
    namespace: '{{ namespace }}'
    labels:
      app: metrics
      service: prometheus
    to_name: grafana
    spec_port_target_port: web
    spec_tls_termination: edge
  register: grafana_route

# Check the containers in the grafana pod and make sure they are all ready
- name: "Wait for all grafana containers to become ready"
  shell: oc get pods --namespace={{ namespace }} --selector="deploymentconfig=grafana" -o jsonpath='{.items[*].status.containerStatuses[?(@.ready==true)].ready}'| wc -w
  register: grafana_result
  until: grafana_result.stdout.find("2") != -1
  retries: 30
  delay: 10

# in order to make our "mobile-services" dashboard the home dashboard,
# we need to get its id and then update org preferences with that id
- name: "Search mobile-services dashboard on service host {{ grafana_internal_service.service.spec.cluster_ip }}"
  uri:
    url: "http://{{ grafana_internal_service.service.spec.cluster_ip }}/api/search?tag=mobile-services"
    headers:
      X-Forwarded-User: "{{ grafana_admin_username }}"
  retries: 5
  until: mobile_services_dashboard_search_response.status == 200
  delay: 5
  register: mobile_services_dashboard_search_response

- name: "Get org preferences on service host {{ grafana_internal_service.service.spec.cluster_ip }}"
  uri:
    url: "http://{{ grafana_internal_service.service.spec.cluster_ip }}/api/org/preferences"
    headers:
      X-Forwarded-User: "{{ grafana_admin_username }}"
  retries: 5
  until: org_preferences_response.status == 200
  delay: 5
  register: org_preferences_response

- name: "Extract org preferences response body"
  set_fact:
    org_preferences: "{{org_preferences_response.json}}"

- name: "Change home dashboard id to mobile-services dashboard id {{ mobile_services_dashboard_search_response.json[0]['id'] }}"
  set_fact:
    org_preferences: "{{ org_preferences | combine({'homeDashboardId': mobile_services_dashboard_search_response.json[0]['id']}) }}"

- name: "Update org preferences with the dashboard id on service host {{ grafana_internal_service.service.spec.cluster_ip }}"
  uri:
    url: "http://{{ grafana_internal_service.service.spec.cluster_ip }}/api/org/preferences"
    headers:
      X-Forwarded-User: "{{ grafana_admin_username }}"
      Content-Type: "application/json"
    method: PUT
    body: "{{ org_preferences | to_json }}"
    body_format: json
  retries: 5
  until: org_pref_update_response.status == 200
  delay: 5
  register: org_pref_update_response

- name: Get the name of the Grafana pod
  shell: oc get pods -n '{{ namespace }}' --selector="deploymentconfig=grafana" -o jsonpath='{.items[0].metadata.name}'
  register: grafana_pod_name
  retries: 10
  until: '"grafana" in grafana_pod_name.stdout'
  delay: 5

#
# Add plugins to PV and restart grafana
# curl -L -o piechart-panel-1.3.3.zip https://grafana.com/api/plugins/grafana-piechart-panel/versions/1.3.3/download
#

- name: Copy Grafana piechart-panel plugin into temp directory
  copy:
    src: grafana-piechart-panel
    dest: /tmp/grafana-piechart-panel

- name: Copy piechart-panel plugin into grafana container
  shell: oc cp /tmp/grafana-piechart-panel {{ namespace }}/{{ grafana_pod_name.stdout }}:/var/lib/grafana/plugins -c grafana
  register: copy_plugin
  retries: 60
  until: copy_plugin.rc == 0
  delay: 5

- name: Restart grafana to pick up on the new plugin (scale down)
  shell: oc scale --replicas=0 --namespace={{ namespace }} dc grafana

- name: Restart grafana to pick up on the new plugin (scale up)
  shell: oc scale --replicas=1 --namespace={{ namespace }} dc grafana
  delay: 10

- name: Wait for all grafana containers to become ready again
  shell: oc get pods --namespace={{ namespace }} --selector="deploymentconfig=grafana" -o jsonpath='{.items[*].status.containerStatuses[?(@.ready==true)].ready}'| wc -w
  register: grafana_result
  until: grafana_result.stdout.find("2") != -1
  retries: 30
  delay: 10
